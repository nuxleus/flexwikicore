#region License Statement
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
// The use and distribution terms for this software are covered by the 
// Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
// which can be found in the file CPL.TXT at the root of this distribution.
// By using this software in any fashion, you are agreeing to be bound by 
// the terms of this license.
//
// You must not remove this notice, or any other, from this software.
#endregion

using System;
using NUnit.Framework;
// This file was generated by C# Refactory.
// To modify this template, go to Tools/Options/C# Refactory/Code

namespace FlexWiki.BuildVerificationTests
{
	public class UITests
	{
		/// <summary>
		/// Answer the namespaces and topics that the default setup and teardown will establish in the federation
		/// </summary>
		internal virtual TestContent FederationContent
		{
			get
			{
				return _TestContent;
			}
		}

		internal TestContent _TestContent = new TestContent(
			new TestNamespace("NamespaceOne", 
			new TestTopic("TopicOne", "This is some test content in NamespaceOne"),
			new TestTopic("TopicTwo", "This is some other test content in NamespaceTwo"),
			new TestTopic("TitledTopic", @"
Hello

Title: This fat hen

"),
      new TestTopic("RenameableTopic", "This topic can be renamed.")
      ),
			new TestNamespace("NamespaceTwo",
			new TestTopic("TopicOne", "This is some test content in NamespaceTwo"),
			new TestTopic("TopicThree", "This is yet more content in NamespaceTwo"),
			new TestTopic("TopicOther", "This is some other test content in NamespaceTwo")
			)
			);

		protected Federation _Federation;

		protected Federation TheFederation
		{
			get
			{
				return _Federation;
			}
			set
			{
				_Federation = value;
			}
		}

		internal WikiState _oldWikiState;

		internal WikiState OldWikiState
		{
			get
			{
				return _oldWikiState;
			}
			set
			{
				_oldWikiState = value;
			}
		}

		[SetUp]
		public virtual void Setup()
		{
			// Back up the wiki configuration
			OldWikiState = TestUtilities.BackupWikiState(); 

			// Recreate the wiki each time so we start from a known state
			string path = System.Guid.NewGuid().ToString();
			TheFederation = TestUtilities.CreateFederation(path, FederationContent); 

			// Establish a link maker
			TheLinkMaker = new LinkMaker(TestUtilities.BaseUrl);

			// And a browser
			TheBrowser = new Browser();
		}

		protected LinkMaker _LinkMaker;

		protected LinkMaker TheLinkMaker
		{
			get
			{
				return _LinkMaker;
			}
			set
			{
				_LinkMaker = value;
			}
		}

		protected Browser _Browser;

		protected Browser TheBrowser
		{
			get
			{
				return _Browser;
			}
			set
			{
				_Browser = value;
			}
		}

		[TearDown]
		public virtual void Teardown()
		{
			TestUtilities.RestoreWikiState(OldWikiState); 
		}
	}
}
